# Default values for bluesky-pds.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

global:
  environment: production
  hostname: mydomain.cloud
  configuration:
    secretStore: "1password"
    secretPath: 'vaults/DevOps/items/bluesky_dev_keys'

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: ghcr.io/bluesky-social/pds
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "0.4"

# This is for the secretes for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations:
  linkerd.io/inject: enabled
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  # port: 80

ports:
  - name: http
    protocol: TCP
    containerPort: 80
  - name: https
    protocol: TCP
    containerPort: 443
  - name: http-app
    protocol: TCP
    containerPort: 3000

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /
    port: http-app
readinessProbe:
  httpGet:
    path: /
    port: http-app

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Environment Variables
env:
# - name: PDS_JWT_SECRET
#   valueFrom:
#     secretKeyRef:
#       name: bluesky-pds-pds-keys
#       key: PDS_JWT_SECRET
# - name: PDS_ADMIN_EMAIL
#   valueFrom:
#     secretKeyRef:
#       name: bluesky-pds-pds-keys
#       key: PDS_ADMIN_EMAIL
# - name: PDS_ADMIN_PASSWORD
#   valueFrom:
#     secretKeyRef:
#       name: bluesky-pds-pds-keys
#       key: PDS_ADMIN_PASSWORD
# - name: PDS_PLC_ROTATION_KEY_K256_PRIVATE_KEY_HEX
#   valueFrom:
#     secretKeyRef:
#       name: bluesky-pds-pds-keys
#       key: PDS_PLC_ROTATION_KEY_K256_PRIVATE_KEY_HEX
- name: PDS_DATA_DIRECTORY
  value: /pds
- name: PDS_BLOBSTORE_DISK_LOCATION
  value: /pds/blocks
- name: PDS_BLOB_UPLOAD_LIMIT
  value: "52428800"
- name: PDS_DID_PLC_URL
  value: "https://plc.directory"
- name: PDS_BSKY_APP_VIEW_URL
  value: "https://api.bsky.app"
- name: PDS_BSKY_APP_VIEW_DID
  value: "did:web:api.bsky.app"
- name: PDS_REPORT_SERVICE_URL
  value: "https://mod.bsky.app"
- name: PDS_REPORT_SERVICE_DID
  value: "did:plc:ar7c4by46qjdydhdevvrndac"
- name: PDS_CRAWLERS
  value: "https://bsky.network"
- name: LOG_ENABLED
  value: "true"

  # # ConfigMap references
  # - name: DB_HOST
  #   valueFrom:
  #     configMapKeyRef:
  #       name: app-config
  #       key: db-host
  # - name: CACHE_TTL
  #   valueFrom:
  #     configMapKeyRef:
  #       name: app-config
  #       key: cache-ttl

# PV/PVC
persistentVolumes:
  pds-data-volume:
    storageClassName: standard
    capacity: 20Gi
    accessModes:
      - ReadWriteOnce
    hostPath: /tmp/pds  # Optional: only if using hostPath
    # nfs:                         # Optional: only if using NFS
    #   server: 1.2.3.4
    #   path: /nfs/app_data/bluesky-pds/local-instance/
    # # Add other volume source types as needed

persistentVolumeClaims:
  pds-data-config-pvc:
    storageClassName: standard
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: 20Gi
    volumeName: pds-data-volume  # Optional: only if you want to bind to specific PV


# Additional volumes on the output Deployment definition.
volumes:
- name: pds-data-config
  persistentVolumeClaim:
    claimName: pds-data-config-pvc
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts:
- name: pds-data-config
  mountPath: "/pds"
  readOnly: false

nodeSelector: {}

tolerations: []

affinity: {}

# Tunnel configuration
tunnel:
  enabled: false
  name: "bluesky-pds"
  defaultBackendService: "http://bluesky-pds.default.svc.cluster.local:3000"
  credentialBackend: "1password"
  secretPath: "vaults/DevOps/items/cloudflared-creds-df6f90fd-af5f-4b2a-8a80-b738d82690ab"